generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  BPJS
  NON_BPJS
  NON_ACTIVE_BPJS
  HOSPITAL_ADMIN
}

model User {
  id              Int            @id @default(autoincrement())
  fullName        String
  phone           String         @unique
  email           String         @unique
  provinsi        String
  kota            String
  kecamatan       String
  kodepos         String
  password        String
  nik             String?
  salary          Float?
  bpjsNumber      String?
  lastPaymentDate DateTime?
  paylaterStatus  Boolean        @default(false)
  refreshTokens   RefreshToken[]
  paylaters       PayLater[]
  treatments      Treatment[]
  role            UserRole       @default(NON_BPJS)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hospital {
  id                    Int         @id @default(autoincrement())
  name                  String
  type                  String
  provinsi              String
  kota                  String
  kecamatan             String
  kodepos               String
  phone                 String      @unique
  image                 String?
  verificationDocuments String?
  services              String[]
  openTime              String
  closeTime             String
  offDays               String[]
  holidays              DateTime[]
  diseases              Disease[]
  treatments            Treatment[]
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}

model Disease {
  id         Int         @id @default(autoincrement())
  name       String
  type       String
  cost       Float
  hospitalId Int
  hospital   Hospital    @relation(fields: [hospitalId], references: [id])
  treatments Treatment[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([hospitalId])
}

model PayLater {
  id         Int         @id @default(autoincrement())
  amount     Float
  tenor      Int
  interest   Float
  userId     Int
  approvedAt DateTime?
  user       User        @relation(fields: [userId], references: [id])
  treatments Treatment[]
  status     String      @default("PENDING") // PENDING, APPROVED, REJECTED, PAID
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([userId])
}

model Treatment {
  id              Int       @id @default(autoincrement())
  appointmentDate DateTime
  userId          Int
  diseaseId       Int
  hospitalId      Int
  payLaterId      Int?
  status          String    @default("PENDING") // PENDING, ONGOING, COMPLETED, CANCELLED
  notes           String?
  user            User      @relation(fields: [userId], references: [id])
  disease         Disease   @relation(fields: [diseaseId], references: [id])
  hospital        Hospital  @relation(fields: [hospitalId], references: [id])
  payLater        PayLater? @relation(fields: [payLaterId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
